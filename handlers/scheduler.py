from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.triggers.cron import CronTrigger\nfrom telegram import Bot\nfrom database.operations import get_users_for_weekly_report, get_weekly_expenses_comparison\nfrom utils.formatters import format_report_message, format_currency\nfrom config import BOT_TOKEN, SCHEDULER_TIMEZONE, WEEKLY_REPORT_HOUR\nimport logging\nfrom datetime import date\nimport asyncio\n\nlogger = logging.getLogger(__name__)\n\nclass ReportScheduler:\n    def __init__(self):\n        self.scheduler = BackgroundScheduler()\n        self.bot = Bot(token=BOT_TOKEN)\n    \n    def start_scheduler(self):\n        \"\"\"Start the scheduler for weekly reports\"\"\"\n        # Schedule weekly report on Monday at specified hour (WIB)\n        self.scheduler.add_job(\n            self.send_weekly_reports,\n            CronTrigger(day_of_week='mon', hour=WEEKLY_REPORT_HOUR, timezone=SCHEDULER_TIMEZONE),\n            id='weekly_report_job',\n            name='Send weekly expense reports to users',\n            replace_existing=True\n        )\n        \n        self.scheduler.start()\n        logger.info(\"Scheduler started for weekly reports\")\n    \n    def stop_scheduler(self):\n        \"\"\"Stop the scheduler\"\"\"\n        self.scheduler.shutdown()\n        logger.info(\"Scheduler stopped\")\n    \n    async def send_weekly_reports(self):\n        \"\"\"Send weekly reports to all active users\"\"\"\n        try:\n            users = get_users_for_weekly_report()\n            logger.info(f\"Sending weekly reports to {len(users)} users\")\n            \n            for user in users:\n                try:\n                    # Get weekly expenses comparison\n                    current_data, previous_data = get_weekly_expenses_comparison(user.telegram_user_id)\n                    \n                    # Only send report if there are expenses this week\n                    if current_data['expenses']:\n                        # Format the report message\n                        period_name = \"Minggu Ini\"\n                        start_date = current_data['start_date']\n                        end_date = current_data['end_date']\n                        comparison_data = (current_data, previous_data)\n                        \n                        report_message = format_report_message(\n                            current_data['expenses'], \n                            period_name, \n                            start_date, \n                            end_date, \n                            comparison_data\n                        )\n                        \n                        # Add comparison info\n                        if previous_data['total'] > 0:\n                            change = ((current_data['total'] - previous_data['total']) / previous_data['total']) * 100\n                            direction = \"ðŸ“ˆ\" if current_data['total'] > previous_data['total'] else \"ðŸ“‰\"\n                            report_message += f\"\\n\\nPerbandingan vs minggu lalu: {change:+.1f}% {direction}\"\n                        \n                        # Send the report to user\n                        await self.bot.send_message(\n                            chat_id=user.telegram_user_id,\n                            text=f\"ðŸ“… Weekly Expense Report\\n\\n{report_message}\"\n                        )\n                    else:\n                        # Send a message saying no expenses this week\n                        await self.bot.send_message(\n                            chat_id=user.telegram_user_id,\n                            text=\"ðŸ“… Weekly Expense Report\\n\\n\"\n                                 \"This week you have no recorded expenses. Keep tracking your expenses to see your spending patterns!\"\n                        )\n                        \n                except Exception as e:\n                    logger.error(f\"Error sending report to user {user.telegram_user_id}: {str(e)}\")\n                    # Continue with next user even if one fails\n                    \n        except Exception as e:\n            logger.error(f\"Error in send_weekly_reports: {str(e)}\")\n    \n    def send_weekly_report_to_user(self, telegram_user_id):\n        \"\"\"Send weekly report to a specific user (for testing or on-demand)\"\"\"\n        try:\n            # Get weekly expenses comparison\n            current_data, previous_data = get_weekly_expenses_comparison(telegram_user_id)\n            \n            # Format the report message\n            period_name = \"Minggu Ini\"\n            start_date = current_data['start_date']\n            end_date = current_data['end_date']\n            comparison_data = (current_data, previous_data)\n            \n            report_message = format_report_message(\n                current_data['expenses'], \n                period_name, \n                start_date, \n                end_date, \n                comparison_data\n            )\n            \n            # Add comparison info\n            if previous_data['total'] > 0:\n                change = ((current_data['total'] - previous_data['total']) / previous_data['total']) * 100\n                direction = \"ðŸ“ˆ\" if current_data['total'] > previous_data['total'] else \"ðŸ“‰\"\n                report_message += f\"\\n\\nPerbandingan vs minggu lalu: {change:+.1f}% {direction}\"\n            \n            return report_message\n            \n        except Exception as e:\n            logger.error(f\"Error generating weekly report for user {telegram_user_id}: {str(e)}\")\n            return f\"Error generating report: {str(e)}\"\n