from decimal import Decimal\nimport matplotlib.pyplot as plt\nimport io\nfrom datetime import date, datetime\nfrom config import CURRENCY_SYMBOL\n\n\ndef format_currency(amount):\n    \"\"\"Format amount as currency\"\"\"\n    if amount is None:\n        return \"Rp 0\"\n    \n    # Convert to Decimal if it's not already\n    if not isinstance(amount, Decimal):\n        amount = Decimal(str(amount))\n    \n    # Format with thousands separator and currency symbol\n    formatted_amount = f\"{CURRENCY_SYMBOL}{amount:,.0f}\".replace(\",\", \".\")\n    return formatted_amount\n\n\ndef format_date_range(start_date, end_date):\n    \"\"\"Format a date range for display\"\"\"\n    if start_date == end_date:\n        return start_date.strftime(\"%d %b %Y\")\n    else:\n        return f\"{start_date.strftime('%d %b')} - {end_date.strftime('%d %b %Y')}\"\n\n\ndef format_expense_message(expense):\n    \"\"\"Format a single expense as a message\"\"\"\n    message = f\"💰 {format_currency(expense.amount)}\\n\"\n    message += f\"🏷️ {expense.category}\\n\"\n    if expense.description:\n        message += f\"📝 {expense.description}\\n\"\n    message += f\"📅 {expense.date.strftime('%d %b %Y')}\\n\"\n    return message\n\n\ndef format_expense_summary(expenses):\n    \"\"\"Format a list of expenses with total and category breakdown\"\"\"\n    if not expenses:\n        return \"❌ No expenses found for this period.\"\n    \n    total_amount = sum(expense.amount for expense in expenses)\n    message = f\"📊 Total: {format_currency(total_amount)}\\n\"\n    message += \"──────────────────\\n\"\n    \n    # Group expenses by category\n    category_totals = {}\n    for expense in expenses:\n        category = expense.category\n        if category not in category_totals:\n            category_totals[category] = Decimal('0')\n        category_totals[category] += expense.amount\n    \n    # Sort categories by amount (descending)\n    sorted_categories = sorted(category_totals.items(), key=lambda x: x[1], reverse=True)\n    \n    # Calculate percentages and format\n    for category, amount in sorted_categories:\n        percentage = (amount / total_amount) * 100\n        message += f\"  {category}: {format_currency(amount)} ({percentage:.0f}%)\\n\"\n    \n    return message\n\n\ndef format_weekly_comparison(current_data, previous_data):\n    \"\"\"Format comparison between current and previous week\"\"\"\n    if not current_data or not previous_data:\n        return \"\"\n    \n    current_total = current_data['total']\n    previous_total = previous_data['total']\n    \n    if previous_total == 0:\n        if current_total == 0:\n            change_text = \"0% (no change)\"\n            change_emoji = \"➡️\"\n        else:\n            change_text = \"100% (new)\"\n            change_emoji = \"🆕\"\n    else:\n        change_percent = ((current_total - previous_total) / previous_total) * 100\n        if change_percent > 0:\n            change_text = f\"{change_percent:+.0f}%\"\n            change_emoji = \"📈\"\n        elif change_percent < 0:\n            change_text = f\"{change_percent:+.0f}%\"\n            change_emoji = \"📉\"\n        else:\n            change_text = f\"{change_percent:+.0f}%\"\n            change_emoji = \"➡️\"\n    \n    return f\"\\n📈 vs previous week: {change_text} {change_emoji}\"\n\n\ndef format_report_message(expenses, period_name, start_date, end_date, comparison_data=None):\n    \"\"\"Format a complete report message\"\"\"\n    period_display = format_date_range(start_date, end_date)\n    message = f\"📊 Laporan {period_name.title()} ({period_display})\\n\\n\"\n    \n    # Add expense summary\n    message += format_expense_summary(expenses)\n    \n    # Add comparison if available\n    if comparison_data:\n        current_data, previous_data = comparison_data\n        message += format_weekly_comparison(current_data, previous_data)\n    \n    return message\n\n\ndef create_expense_chart(expenses):\n    \"\"\"Create a simple chart image of expenses by category\"\"\"\n    if not expenses:\n        return None\n    \n    # Group expenses by category\n    category_totals = {}\n    for expense in expenses:\n        category = expense.category\n        if category not in category_totals:\n            category_totals[category] = Decimal('0')\n        category_totals[category] += expense.amount\n    \n    # Prepare data for chart\n    categories = list(category_totals.keys())\n    amounts = [float(amount) for amount in category_totals.values()]\n    \n    # Create the chart\n    plt.figure(figsize=(10, 6))\n    plt.pie(amounts, labels=categories, autopct='%1.1f%%', startangle=90)\n    plt.title('Pengeluaran Berdasarkan Kategori')\n    \n    # Save chart to bytes\n    img_buffer = io.BytesIO()\n    plt.savefig(img_buffer, format='png')\n    img_buffer.seek(0)\n    plt.close()\n    \n    return img_buffer\n\n\ndef format_categories_list(categories):\n    \"\"\"Format a list of categories for display\"\"\"\n    if not categories:\n        return \"❌ No categories found.\"\n    \n    message = \"🏷️ Categories:\\n\"\n    for i, category in enumerate(categories, 1):\n        message += f\"  {i}. {category}\\n\"\n    \n    return message\n\n\ndef format_budget_message(budget, current_spending):\n    \"\"\"Format budget status message\"\"\"\n    if budget is None:\n        return \"❌ Budget not set. Use /set_budget to set your monthly budget.\"\n    \n    budget = float(budget)\n    current_spending = float(current_spending)\n    remaining = budget - current_spending\n    percentage = (current_spending / budget) * 100\n    \n    status_emoji = \"🟢\" if percentage < 50 else \"🟡\" if percentage < 80 else \"🔴\"\n    \n    message = f\"💰 Monthly Budget: {format_currency(budget)}\\n\"\n    message += f\"💳 Spent: {format_currency(current_spending)} ({percentage:.1f}%)\\n\"\n    message += f\"✅ Remaining: {format_currency(remaining)}\\n\"\n    message += f\"{status_emoji} Status: \"\n    \n    if percentage >= 100:\n        message += \"⚠️ Budget exceeded!\"\n    elif percentage >= 90:\n        message += \"⚠️ Approaching budget limit!\"\n    elif percentage >= 75:\n        message += \"⚠️ Close to budget limit\"\n    else:\n        message += \"✅ Within budget\"\n    \n    return message